version: '3.7'

services:

##
# NGINX section
# (depends on config/nginx.conf)
##
  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - ./app:/app
      - ./data:/data
    links:
      - php
      - mariadb
    depends_on:
      - php
      - mariadb
    networks:
      - docker-simple

##
# PHP section
# (depends on config/PHP.Dockerfile
##
  php:
    container_name: php
    build:
      context: .
      dockerfile: ./config/PHP.Dockerfile
    volumes:
      - ./app:/app
      - ./data:/data
      - ./data/logs/php:/var/log
    links:
      - mariadb
    depends_on:
      - mariadb
    networks:
      - docker-simple

##
# DB section
##
  mariadb:
    container_name: mariadb
    image: mariadb:10.5 #latest
    restart: always
    environment:
      MARIADB_ROOT_PASSWORD: password123
      MARIADB_USER: user
      MARIADB_PASSWORD: password123
#      MYSQL_ROOT_PASSWORD: password123
#      MYSQL_USER: user
#      MYSQL_PASSWORD: password123
    ports:
      - "3306:3306"
    expose:
      - "3306"
    volumes:
#      - ./data/mysql:/var/lib/mysql
      - ./data/logs/mysql:/var/log/mysql
    networks:
      - docker-simple

  postgres:
    image: postgres
    container_name: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: kisphp
      POSTGRES_USER: root
      POSTGRES_NAME: kisphp
    ports:
      - "5432:5432"
    expose:
      - "5432"
    volumes:
      - ./postgres:/var/lib/postgresql/data
    networks:
      - docker-simple

##
# DB GUI section
##
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - mariadb
    networks:
      - docker-simple

#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin:latest
#    container_name: phpmyadmin
#    links:
#      - mariadb
#    depends_on:
#      - mariadb
#    restart: always
#    ports:
#      - "8082:80"
#    environment:
#      PMA_USER: root
#      PMA_PASSWORD: password123
#      PMA_HOST: mariadb
#      PMA_ARBITRARY: 1
#    networks:
#      - docker-simple

##
# Elasticsearch section
##
#  elasticsearch:
#    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2
#    container_name: elasticsearch
#    environment:
#      - cluster.name=docker-cluster
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - ./data/elasticsearch:/usr/share/elasticsearch/data
#    ports:
#      - "9200:9200"
#    networks:
#      - docker-simple
#
#  elasticsearch2:
#    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2
#    container_name: elasticsearch2
#    environment:
#      - cluster.name=docker-cluster
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
#      - "discovery.zen.ping.unicast.hosts=elasticsearch"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    volumes:
#      - ./data/elasticsearch:/usr/share/elasticsearch/data
#    networks:
#      - docker-simple

  # See https://elk-docker.readthedocs.io/
  # For viewing through elastic search JSON display, navigate to: http://127.0.0.1:9200/_search?pretty
#  elasticsearch:
#    image: sebp/elk
#    hostname: elasticsearch.local
#    container_name: elasticsearch
#    ports:
#      - "5601:5601" # Kibana web interface
#      - "9200:9200" # Elasticsearch JSON interface
#      - "9300:9300" # Elasticsearch Transport interface
#      - "5044:5044" # Logstash Beats interface
#    environment:
#      HOSTNAME: elasticsearch.local
#      MAX_MAP_COUNT: 262144
#    volumes:
#      - ./data/elasticsearch:/usr/share/elasticsearch/data
#    networks:
#      - docker-simple

##
# Redis section
##
  redis:
    image: redis:6.2.5
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
    volumes:
      - ./data/redis:/var/lib/redis
    links:
      - redis-commander
    networks:
      - docker-simple

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    environment:
      REDIS_HOSTS: redis
      REDIS_HOST: redis
      REDIS_PORT: redis:6379
      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
      HTTP_USER: root
      HTTP_PASSWORD: root
    ports:
      - "8081:8081"
    networks:
      - docker-simple

##
# Mail-catcher section
##
  # See https://github.com/djfarrelly/MailDev/blob/master/docs/docker.md
  maildev:
    image: djfarrelly/maildev
    container_name: maildev
    restart: always
    ports:
      - "8002:80"
    environment:
      HOSTNAME: maildev.local
    networks:
      - docker-simple

#  api:
#    container_name: quotes-api
#    build:
#      context: ./
#      target: production
#    image: quotes-api
#    depends_on:
#      - mysql
#      - redis
#    ports:
#      - 3000:3000
#    environment:
#      NODE_ENV: production
#      DB_HOST: mysql
#      DB_PORT: 3306
#      DB_USER: root
#      DB_PASSWORD: password123
#      DB_NAME: redis
#      REDIS_HOST: cache
#      REDIS_PORT: 6379
#      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
#    links:
#      - mysql
#      - redis
#    volumes:
#      - ./data/api:/src

networks:
  docker-simple:

#volumes:
#  redis:
#  esdata1:
#    driver: local
#  esdata2:
#    driver: local
#  mysqldata:
